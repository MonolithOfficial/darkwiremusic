{"version":3,"sources":["images/darkwirecover.png","components/Navbar.js","components/Slideshow.js","components/Home.js","components/Article.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","id","to","Slideshow","state","slides","activeSlide","axios","get","then","res","setState","data","showFirstSlide","this","interval","setInterval","showSlides","console","log","clearInterval","slidesList","length","map","slide","content","key","number","className","src","photo","alt","style","width","title","Component","x","allSlides","document","querySelectorAll","i","display","setTimeout","Home","articles","articleList","article","category","Article","props","match","params","post_id","Axios","articleBody","each","Number","place","name","description","Footer","articleProps","App","articleData","darkwirecover","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a9b89ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/darkwirecover.4bb2a429.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav id=\"navbar\">\r\n            <ul>\r\n                <li><NavLink to=\"darkwiremusic/\">Home</NavLink></li>\r\n                <li><NavLink to=\"darkwiremusic/reviews\">Reviews</NavLink></li>\r\n                <li><NavLink to=\"darkwiremusic/lists\">Lists</NavLink></li>\r\n                <li><NavLink to=\"darkwiremusic/register\">Register</NavLink></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nexport class Slideshow extends Component {\r\n    state = {\r\n        slides: [],\r\n        activeSlide: 1 \r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get(\"https://raw.githubusercontent.com/MonolithOfficial/darkwirejsons/master/articles.json\")\r\n        .then(res => {\r\n            this.setState({\r\n                slides: res.data\r\n            })\r\n            showFirstSlide();\r\n            \r\n            \r\n            \r\n        })\r\n        this.interval = setInterval(() => showSlides(), 5000)\r\n        // setInterval(() => this.setState({ activeSlide: x++}), 6000);\r\n        \r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(this.state.activeSlide)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        \r\n        clearInterval(this.interval);\r\n    }\r\n\r\n     \r\n\r\n\r\n    render() {\r\n        // setTimeout(showFirstSlide(), 200);\r\n        const { slides } = this.state;\r\n        const slidesList = slides.length ? (\r\n            slides.map(slide => {\r\n                return (\r\n\r\n                    <Link to={\"darkwire/\" + slide.content} key={slide.number}>\r\n                        <div className=\"mySlides fade\">\r\n                            <div className=\"numbertext\">{slide.number} / {slides.length}</div>\r\n                            <img src={\"https://raw.githubusercontent.com/MonolithOfficial/darkwirejsons/master/images/\" + slide.photo} alt=\"\" style={{width: \"100%\"}}/>\r\n                            <div className=\"text\">{slide.title}</div>\r\n                            \r\n                        </div>\r\n                    </Link>\r\n                    \r\n                )\r\n            })\r\n        ) : (\r\n            <h3 className=\"loading\"></h3>\r\n        )\r\n        \r\n        return (\r\n            <div>\r\n                {slidesList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet x = 0\r\nconst showSlides = () => {\r\n    let allSlides = document.querySelectorAll('.mySlides')\r\n\r\n    if (x === allSlides.length - 1){\r\n        x = 0;\r\n    }\r\n    for (let i = 0; i < allSlides.length; i++) {\r\n        allSlides[i].style.display = \"none\";\r\n    }\r\n    x++;\r\n    allSlides[x - 1].style.display = \"block\";\r\n    // allSlides[x - 1].style.display = \"none\";\r\n    console.log(x)\r\n}\r\n\r\nconst showFirstSlide = () => {\r\n    const allSlides = document.querySelectorAll('.mySlides');\r\n    \r\n    setTimeout(() => {\r\n        allSlides[0].style.display = \"block\"\r\n    }, 400)\r\n    \r\n}\r\n\r\nexport default Slideshow;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport Slideshow from './Slideshow';\r\n\r\nexport class Home extends Component {\r\n    state = {\r\n        articles: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get(\"https://raw.githubusercontent.com/MonolithOfficial/darkwirejsons/master/articles.json\")\r\n        .then(res => {\r\n            this.setState({\r\n                articles: res.data\r\n            })\r\n            console.log(this.state.articles)\r\n            \r\n        })\r\n        \r\n    }\r\n    render() {\r\n        let { articles } = this.state;\r\n        let articleList = articles.length ? (\r\n            articles.map(article => {\r\n                return (\r\n                    \r\n                    <div className=\"articleDiv\" key={article.number}>\r\n                        <img src={\"https://raw.githubusercontent.com/MonolithOfficial/darkwirejsons/master/images/\" + article.photo} alt=\"\"/>\r\n                        <div>\r\n                            <Link to={\"darkwire/\" + article.content}><p className=\"articleTitle\">{article.title}</p></Link>\r\n                            <p className=\"articleCategory\">{article.category}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ) : (\r\n            <h1>There are no articles at the moment</h1>\r\n        )\r\n        return (\r\n            <div>\r\n                <div id=\"topContainer\">\r\n                    <div className=\"slideshow-container\">\r\n                        <Slideshow />\r\n                    </div>\r\n                </div>\r\n                <div id=\"pageWrapperHome\">\r\n                    <div className=\"wrapper\">\r\n                        {articleList}\r\n                        \r\n                    </div>\r\n                    <div className=\"charts\">\r\n                        ey\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\n\r\nexport class Article extends Component {\r\n    state = {\r\n        article: ''\r\n    }\r\n\r\n    componentDidMount(){\r\n        let id = this.props.match.params.post_id;\r\n        \r\n\r\n        Axios.get(\"https://raw.githubusercontent.com/MonolithOfficial/darkwirejsons/master/\" + id)\r\n        .then(res => {\r\n            this.setState({\r\n                article: res.data\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        const { article } = this.state;\r\n        const articleBody = article.length ? (\r\n            article.map(each => {\r\n                return (\r\n                    <div className=\"wrapperArticle\" key={Number(each.place)}>\r\n                        <h3 className=\"mainSubTitle\">{each.place}. {each.name}</h3>\r\n                        <p className=\"desc\">{each.description}</p>\r\n                        <img src={\"https://raw.githubusercontent.com/MonolithOfficial/darkwirejsons/master/images/\" + each.photo} alt=\"\"/>\r\n                    </div>\r\n                    \r\n                )\r\n            })\r\n        ) : (\r\n            <h1>Loading. Please wait.</h1>\r\n        )\r\n        return (\r\n            <div id=\"pageWrapper\">\r\n                \r\n                {articleBody}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Article\r\n","import React from 'react'\r\n\r\nconst Footer = (props) => {\r\n    const { articleProps } = props;\r\n    console.log(articleProps)\r\n    return (\r\n        <div id=\"footer\">\r\n            <div id=\"footerContent\">\r\n\r\n            </div>\r\n            <div id=\"footerCopyright\">\r\n                <p>Darkwire, a property of Darkroom Laboratories</p>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport Article from './components/Article'\nimport Footer from './components/Footer'\nimport darkwirecover from './images/darkwirecover.png';\nimport axios from 'axios';\n\n\n\n\nclass App extends Component {\n  state = {\n    articleData: []\n  }\n  componentDidMount(){\n    axios.get(\"https://raw.githubusercontent.com/MonolithOfficial/darkwirejsons/master/articles.json\")\n    .then(res => {\n        this.setState({\n          articleData: res.data\n        })\n        console.log(this.state)\n    })\n    \n  }\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <img id=\"mainLogo\" src={darkwirecover} alt=\"darkwire\"/>\n          <Navbar />\n          \n          \n          <Switch>\n\n            <Route exact path=\"darkwiremusic/\" component={Home}/>\n            <Route path=\"darkwiremusic/:post_id\" component={Article}/>\n          </Switch>\n          <Footer articleProps={this.state.articleData}/>\n        </div>\n      </BrowserRouter>\n      \n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}